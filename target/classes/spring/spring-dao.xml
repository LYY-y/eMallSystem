<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context.xsd">
    <!-- 配置整合mybatis过程 -->
    <!-- 1.配置数据库相关参数properties的属性：${url} -->
    <context:property-placeholder location="classpath:jdbc.properties" />

    <!-- 2.数据库连接池 -->
    <bean id="myDruid" class="com.alibaba.druid.pool.DruidDataSource"
           init-method="init" destroy-method="close">
    <property name="driverClassName" value="${jdbc.driverClassName}" />
    <property name="url" value="${jdbc.url}" />
    <property name="username" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />

    <!-- 配置初始化大小、最小、最大 -->
    <property name="initialSize" value="3" />
    <property name="minIdle" value="3" />
    <property name="maxActive" value="8" />

</bean>

    <!-- 3.配置SqlSessionFactory对象 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="myDruid" />
        <!-- 配置MyBaties全局配置文件:mybatis-config.xml；当SqlSessionFactoryBean提供的配置不能满足使用时，
        你可以使用mybatis-config.xml配置文件配置其他属性，然后通过configLocation属性指定该配置的路径，SqlSessionFactoryBean会使用
        该配置文件创建Configuration -->
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 扫描entity包 使用别名；该属性可以给包中的类注册别名，注册后可以直接使用类名，而不用使用全限定的类名（就是不用包含包名）。 -->
        <property name="typeAliasesPackage" value="com.eMall.entity" />
        <!-- 扫描sql配置文件:mapper需要的xml文件；mapperLocations属性配置该属性后，sqlSessionFactory会自动扫描该路径下的所有文件并解析。 -->
        <property name="mapperLocations" value="classpath:mapping/*.xml" />
    </bean>

    <!-- 4.配置扫描Dao接口包，动态实现Dao接口，注入到spring容器中 。代替手工使用 SqlSessionDaoSupport 或 SqlSessionTemplate
    编写数据访问对象 (DAO)的代码,MyBatis-Spring 提供了一个动态代理的实现:MapperFactoryBean。这个类 可以让你直接注入数据映射器接口
    到你的 service 层 bean 中。当使用映射器时,仅仅如调 用DAO 一样调用它们就可以了,但是你不需要编写任何 DAO 实现的代码,因为
    MyBatis-Spring 将会为你创建代理。-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 注入sqlSessionFactory -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <!-- 给出需要扫描Dao接口包 -->
        <property name="basePackage" value="com.eMall.dao" />
    </bean>
</beans>
